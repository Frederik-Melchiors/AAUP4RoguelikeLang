using System;

namespace MapGen
{
	class Map {
	    public Dictionary<string, MapLayer> layers {get; private set;}
	    public int d1Size;
	    public int d2Size;
	    public Map(int d1Size, int d2Size, params MapLayer[] list)
	    {
	        layers = new();
	        foreach (MapLayer layer in list) {
	            layers.Add(layer.Identifier, layer);
	            layer.SetInitialValues(d1Size, d2Size);
	        }
	        this.d1Size = d1Size;
	        this.d2Size = d2Size;
	    }
	}
	class MapLayer {
	    public object InitialValue {get; private set; }
	    public object[,]? LayerValue {get; private set; }
	    public string Identifier {get; private set; }
	    public void SetInitialValues (int size1, int size2) {
	        LayerValue = new object[size1,size2];
	        for (int i = 0; i < size1; i++)
	            for (int j = 0; j < size2; j++)
	                LayerValue[i,j] = InitialValue;
	                
	    }
	    public MapLayer (string type, string identifier, object? InitialValue) {
	        this.Identifier = identifier;
	        if (InitialValue != null) {
	            this.InitialValue = InitialValue;
	        } else {
	            this.InitialValue = type == "int" ? 0 : false;
	        }
	    }
	}
	static class Stdlib {
		public static void print (int val) {
			System.Console.WriteLine(val);
		}
		public static void print (int[] val) {
			System.Console.Write("[");			for (int i = 0; i < val.GetLength(0); i++) {				System.Console.Write(val[i] + ",");			}			System.Console.WriteLine("]");		}
		public static void print (int[,] val) {
			System.Console.WriteLine("[");			for (int i = 0; i < val.GetLength(1); i++) {			System.Console.Write("[");			for (int j = 0; j < val.GetLength(0); j++) {				System.Console.Write(val[j,i] + ",");			}			System.Console.WriteLine("]");			}			System.Console.WriteLine("]");		}
		public static void print (bool val) {
			System.Console.WriteLine(val);
		}
		public static void print (bool[] val) {
			System.Console.Write("[");			for (int i = 0; i < val.GetLength(0); i++) {				System.Console.Write(val[i] + ",");			}			System.Console.WriteLine("]");		}
		public static void print (bool[,] val) {
			System.Console.WriteLine("[");			for (int i = 0; i < val.GetLength(1); i++) {			System.Console.Write("[");			for (int j = 0; j < val.GetLength(0); j++) {				System.Console.Write(val[j,i] + ",");			}			System.Console.WriteLine("]");			}			System.Console.WriteLine("]");		}
	}

	class Program
	{
		static void Main(string[] args)
		{
			int i = 0;
			{
				int _sum = 0;
				_sum += 10;
				_sum += 20;
				int _chance = rng.Next(0,_sum);
				if (_chance <10)
				{
					i = 1;
				}
				else {_chance -= 10;}
				if (_chance <20)
				{
					i = 2;
				}
				else {_chance -= 20;}
			}

			Stdlib.print(i);
		}
	}
}


