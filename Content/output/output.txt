using System;

namespace MapGen
{
	class Map {
		Dictionary<string, int[][]> IntLayers = new();
		Dictionary<string, bool[][]> BoolLayers = new();
		public int d1Size;
		public int d2Size;
		public Map(int d1Size, int d2Size)
		{
			this.d1Size = d1Size;
			this.d2Size = d2Size;
		}
	}

	static class Stdlib {
		public static void print (int val) {
			System.Console.WriteLine(val);
		}
		public static void print (int[] val) {
			System.Console.Write("[");			for (int i = 0; i < val.GetLength(0); i++) {				System.Console.Write(val[i] + ",");			}			System.Console.WriteLine("]");		}
		public static void print (int[,] val) {
			System.Console.WriteLine("[");			for (int i = 0; i < val.GetLength(0); i++) {			System.Console.Write("[");			for (int j = 0; j < val.GetLength(1); j++) {				System.Console.Write(val[j,i] + ",");			}			System.Console.WriteLine("]");			}			System.Console.WriteLine("]");		}
		public static void print (bool val) {
			System.Console.WriteLine(val);
		}
		public static void print (bool[] val) {
			System.Console.Write("[");			for (int i = 0; i < val.GetLength(0); i++) {				System.Console.Write(val[i] + ",");			}			System.Console.WriteLine("]");		}
		public static void print (bool[,] val) {
			System.Console.WriteLine("[");			for (int i = 0; i < val.GetLength(0); i++) {			System.Console.Write("[");			for (int j = 0; j < val.GetLength(1); j++) {				System.Console.Write(val[j,i] + ",");			}			System.Console.WriteLine("]");			}			System.Console.WriteLine("]");		}
	}

	class Program
	{
		static void Main(string[] args)
		{
			int j = 0;
						int i = 0;
			while (i<2)
			{
				Stdlib.print(i);
				i = i+1;
			}


		}
	}
}


