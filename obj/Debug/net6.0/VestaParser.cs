//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\fredm\RiderProjects\P4Project\Antlr language\Content\Vesta.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Antlr_language.Content {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class VestaParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, BOOL_OPERATOR=31, 
		INTEGER=32, BOOL=33, TYPE=34, IDENTIFIER=35, WS=36;
	public const int
		RULE_program = 0, RULE_line = 1, RULE_statement = 2, RULE_ifBlock = 3, 
		RULE_elseIfBlock = 4, RULE_whileBlock = 5, RULE_chanceBlock = 6, RULE_block = 7, 
		RULE_assignment = 8, RULE_declartion = 9, RULE_functionCall = 10, RULE_expression = 11, 
		RULE_arrayOp = 12, RULE_multOp = 13, RULE_addOp = 14, RULE_compareOp = 15, 
		RULE_boolOp = 16, RULE_constant = 17, RULE_identifierType = 18;
	public static readonly string[] ruleNames = {
		"program", "line", "statement", "ifBlock", "elseIfBlock", "whileBlock", 
		"chanceBlock", "block", "assignment", "declartion", "functionCall", "expression", 
		"arrayOp", "multOp", "addOp", "compareOp", "boolOp", "constant", "identifierType"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'if'", "'('", "')'", "'else'", "'while'", "'chance'", "'{'", 
		"':'", "'}'", "'='", "'var'", "','", "'['", "']'", "'rand('", "'.'", "'!'", 
		"'remove'", "'add'", "'*'", "'/'", "'+'", "'-'", "'=='", "'!='", "'>'", 
		"'<'", "'>='", "'<='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "BOOL_OPERATOR", "INTEGER", 
		"BOOL", "TYPE", "IDENTIFIER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Vesta.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public VestaParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(VestaParser.Eof, 0); }
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVestaVisitor<TResult> typedVisitor = visitor as IVestaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__5) | (1L << T__6) | (1L << T__11) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 38; line();
				}
				}
				State = 43;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 44; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public IfBlockContext ifBlock() {
			return GetRuleContext<IfBlockContext>(0);
		}
		public WhileBlockContext whileBlock() {
			return GetRuleContext<WhileBlockContext>(0);
		}
		public ChanceBlockContext chanceBlock() {
			return GetRuleContext<ChanceBlockContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVestaVisitor<TResult> typedVisitor = visitor as IVestaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_line);
		try {
			State = 50;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__11:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 46; statement();
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 2);
				{
				State = 47; ifBlock();
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 3);
				{
				State = 48; whileBlock();
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 4);
				{
				State = 49; chanceBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public DeclartionContext declartion() {
			return GetRuleContext<DeclartionContext>(0);
		}
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVestaVisitor<TResult> typedVisitor = visitor as IVestaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				{
				State = 52; declartion();
				}
				break;

			case 2:
				{
				State = 53; assignment();
				}
				break;

			case 3:
				{
				State = 54; functionCall();
				}
				break;
			}
			State = 57; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBlockContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseIfBlockContext elseIfBlock() {
			return GetRuleContext<ElseIfBlockContext>(0);
		}
		public IfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.EnterIfBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.ExitIfBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVestaVisitor<TResult> typedVisitor = visitor as IVestaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfBlockContext ifBlock() {
		IfBlockContext _localctx = new IfBlockContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_ifBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59; Match(T__1);
			State = 60; Match(T__2);
			State = 61; expression(0);
			State = 62; Match(T__3);
			State = 63; block();
			State = 66;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__4) {
				{
				State = 64; Match(T__4);
				State = 65; elseIfBlock();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfBlockContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfBlockContext ifBlock() {
			return GetRuleContext<IfBlockContext>(0);
		}
		public ElseIfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.EnterElseIfBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.ExitElseIfBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVestaVisitor<TResult> typedVisitor = visitor as IVestaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfBlockContext elseIfBlock() {
		ElseIfBlockContext _localctx = new ElseIfBlockContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_elseIfBlock);
		try {
			State = 70;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__7:
				EnterOuterAlt(_localctx, 1);
				{
				State = 68; block();
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 2);
				{
				State = 69; ifBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileBlockContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.EnterWhileBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.ExitWhileBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVestaVisitor<TResult> typedVisitor = visitor as IVestaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileBlockContext whileBlock() {
		WhileBlockContext _localctx = new WhileBlockContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_whileBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72; Match(T__5);
			State = 73; Match(T__2);
			State = 74; expression(0);
			State = 75; Match(T__3);
			State = 76; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChanceBlockContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public ChanceBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chanceBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.EnterChanceBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.ExitChanceBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVestaVisitor<TResult> typedVisitor = visitor as IVestaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChanceBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChanceBlockContext chanceBlock() {
		ChanceBlockContext _localctx = new ChanceBlockContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_chanceBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78; Match(T__6);
			State = 79; Match(T__7);
			State = 84;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 80; expression(0);
				State = 81; Match(T__8);
				State = 82; block();
				}
				}
				State = 86;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__7) | (1L << T__15) | (1L << T__17) | (1L << INTEGER) | (1L << BOOL) | (1L << IDENTIFIER))) != 0) );
			State = 88; Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVestaVisitor<TResult> typedVisitor = visitor as IVestaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90; Match(T__7);
			State = 94;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__5) | (1L << T__6) | (1L << T__11) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 91; line();
				}
				}
				State = 96;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 97; Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(VestaParser.IDENTIFIER, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVestaVisitor<TResult> typedVisitor = visitor as IVestaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99; Match(IDENTIFIER);
			State = 100; Match(T__10);
			State = 101; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclartionContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(VestaParser.IDENTIFIER, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclartionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declartion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.EnterDeclartion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.ExitDeclartion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVestaVisitor<TResult> typedVisitor = visitor as IVestaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclartion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclartionContext declartion() {
		DeclartionContext _localctx = new DeclartionContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_declartion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103; Match(T__11);
			State = 104; Match(IDENTIFIER);
			State = 105; Match(T__10);
			State = 106; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(VestaParser.IDENTIFIER, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVestaVisitor<TResult> typedVisitor = visitor as IVestaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108; Match(IDENTIFIER);
			State = 109; Match(T__2);
			State = 118;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__7) | (1L << T__15) | (1L << T__17) | (1L << INTEGER) | (1L << BOOL) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 110; expression(0);
				State = 115;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__12) {
					{
					{
					State = 111; Match(T__12);
					State = 112; expression(0);
					}
					}
					State = 117;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 120; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstantExpressionContext : ExpressionContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstantExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.EnterConstantExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.ExitConstantExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVestaVisitor<TResult> typedVisitor = visitor as IVestaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : ExpressionContext {
		public ITerminalNode IDENTIFIER() { return GetToken(VestaParser.IDENTIFIER, 0); }
		public IdentifierExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVestaVisitor<TResult> typedVisitor = visitor as IVestaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayIdentifierExpressionContext : ExpressionContext {
		public ITerminalNode IDENTIFIER() { return GetToken(VestaParser.IDENTIFIER, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrayIdentifierExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.EnterArrayIdentifierExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.ExitArrayIdentifierExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVestaVisitor<TResult> typedVisitor = visitor as IVestaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrayExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.EnterArrayExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.ExitArrayExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVestaVisitor<TResult> typedVisitor = visitor as IVestaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RandomExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RandomExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.EnterRandomExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.ExitRandomExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVestaVisitor<TResult> typedVisitor = visitor as IVestaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRandomExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallExpressionContext : ExpressionContext {
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public FunctionCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.EnterFunctionCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.ExitFunctionCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVestaVisitor<TResult> typedVisitor = visitor as IVestaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayOperationExpressionContext : ExpressionContext {
		public ITerminalNode IDENTIFIER() { return GetToken(VestaParser.IDENTIFIER, 0); }
		public ArrayOpContext arrayOp() {
			return GetRuleContext<ArrayOpContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArrayOperationExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.EnterArrayOperationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.ExitArrayOperationExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVestaVisitor<TResult> typedVisitor = visitor as IVestaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayOperationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesizedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVestaVisitor<TResult> typedVisitor = visitor as IVestaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.EnterNotExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.ExitNotExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVestaVisitor<TResult> typedVisitor = visitor as IVestaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicationExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultOpContext multOp() {
			return GetRuleContext<MultOpContext>(0);
		}
		public MultiplicationExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.EnterMultiplicationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.ExitMultiplicationExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVestaVisitor<TResult> typedVisitor = visitor as IVestaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditionExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AddOpContext addOp() {
			return GetRuleContext<AddOpContext>(0);
		}
		public AdditionExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.EnterAdditionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.ExitAdditionExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVestaVisitor<TResult> typedVisitor = visitor as IVestaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CompareExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CompareOpContext compareOp() {
			return GetRuleContext<CompareOpContext>(0);
		}
		public CompareExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.EnterCompareExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.ExitCompareExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVestaVisitor<TResult> typedVisitor = visitor as IVestaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BoolOpContext boolOp() {
			return GetRuleContext<BoolOpContext>(0);
		}
		public BooleanExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.EnterBooleanExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.ExitBooleanExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVestaVisitor<TResult> typedVisitor = visitor as IVestaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
			case 1:
				{
				_localctx = new ConstantExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 123; constant();
				}
				break;

			case 2:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 124; Match(IDENTIFIER);
				}
				break;

			case 3:
				{
				_localctx = new ArrayIdentifierExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 125; Match(IDENTIFIER);
				State = 130;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 126; Match(T__13);
						State = 127; expression(0);
						State = 128; Match(T__14);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 132;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 4:
				{
				_localctx = new ArrayExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 134; Match(T__7);
				{
				State = 135; expression(0);
				State = 140;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__12) {
					{
					{
					State = 136; Match(T__12);
					State = 137; expression(0);
					}
					}
					State = 142;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				State = 143; Match(T__9);
				}
				break;

			case 5:
				{
				_localctx = new RandomExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 145; Match(T__15);
				State = 146; expression(0);
				State = 147; Match(T__12);
				State = 148; expression(0);
				State = 149; Match(T__3);
				}
				break;

			case 6:
				{
				_localctx = new FunctionCallExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 151; functionCall();
				}
				break;

			case 7:
				{
				_localctx = new ArrayOperationExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 152; Match(IDENTIFIER);
				State = 153; Match(T__16);
				State = 154; arrayOp();
				State = 155; Match(T__2);
				State = 156; expression(0);
				State = 157; Match(T__3);
				}
				break;

			case 8:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 159; Match(T__2);
				State = 160; expression(0);
				State = 161; Match(T__3);
				}
				break;

			case 9:
				{
				_localctx = new NotExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 163; Match(T__17);
				State = 164; expression(5);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 185;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,13,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 183;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,12,_ctx) ) {
					case 1:
						{
						_localctx = new MultiplicationExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 167;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 168; multOp();
						State = 169; expression(5);
						}
						break;

					case 2:
						{
						_localctx = new AdditionExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 171;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 172; addOp();
						State = 173; expression(4);
						}
						break;

					case 3:
						{
						_localctx = new CompareExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 175;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 176; compareOp();
						State = 177; expression(3);
						}
						break;

					case 4:
						{
						_localctx = new BooleanExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 179;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 180; boolOp();
						State = 181; expression(2);
						}
						break;
					}
					} 
				}
				State = 187;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,13,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArrayOpContext : ParserRuleContext {
		public ArrayOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.EnterArrayOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.ExitArrayOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVestaVisitor<TResult> typedVisitor = visitor as IVestaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayOpContext arrayOp() {
		ArrayOpContext _localctx = new ArrayOpContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_arrayOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			_la = _input.La(1);
			if ( !(_la==T__18 || _la==T__19) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultOpContext : ParserRuleContext {
		public MultOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.EnterMultOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.ExitMultOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVestaVisitor<TResult> typedVisitor = visitor as IVestaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultOpContext multOp() {
		MultOpContext _localctx = new MultOpContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_multOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			_la = _input.La(1);
			if ( !(_la==T__20 || _la==T__21) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddOpContext : ParserRuleContext {
		public AddOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.EnterAddOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.ExitAddOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVestaVisitor<TResult> typedVisitor = visitor as IVestaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddOpContext addOp() {
		AddOpContext _localctx = new AddOpContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_addOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			_la = _input.La(1);
			if ( !(_la==T__22 || _la==T__23) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareOpContext : ParserRuleContext {
		public CompareOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.EnterCompareOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.ExitCompareOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVestaVisitor<TResult> typedVisitor = visitor as IVestaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareOpContext compareOp() {
		CompareOpContext _localctx = new CompareOpContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_compareOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolOpContext : ParserRuleContext {
		public ITerminalNode BOOL_OPERATOR() { return GetToken(VestaParser.BOOL_OPERATOR, 0); }
		public BoolOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.EnterBoolOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.ExitBoolOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVestaVisitor<TResult> typedVisitor = visitor as IVestaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolOpContext boolOp() {
		BoolOpContext _localctx = new BoolOpContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_boolOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196; Match(BOOL_OPERATOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public ITerminalNode INTEGER() { return GetToken(VestaParser.INTEGER, 0); }
		public ITerminalNode BOOL() { return GetToken(VestaParser.BOOL, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVestaVisitor<TResult> typedVisitor = visitor as IVestaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			_la = _input.La(1);
			if ( !(_la==INTEGER || _la==BOOL) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierTypeContext : ParserRuleContext {
		public ITerminalNode TYPE() { return GetToken(VestaParser.TYPE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IdentifierTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.EnterIdentifierType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVestaListener typedListener = listener as IVestaListener;
			if (typedListener != null) typedListener.ExitIdentifierType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVestaVisitor<TResult> typedVisitor = visitor as IVestaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierTypeContext identifierType() {
		IdentifierTypeContext _localctx = new IdentifierTypeContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_identifierType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200; Match(TYPE);
			State = 207;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__13) {
				{
				{
				State = 201; Match(T__13);
				State = 202; expression(0);
				State = 203; Match(T__14);
				}
				}
				State = 209;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 11: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 4);

		case 1: return Precpred(_ctx, 3);

		case 2: return Precpred(_ctx, 2);

		case 3: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3&\xD5\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x3\x2\a\x2*\n"+
		"\x2\f\x2\xE\x2-\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3\x35\n\x3"+
		"\x3\x4\x3\x4\x3\x4\x5\x4:\n\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\x5\x5\x45\n\x5\x3\x6\x3\x6\x5\x6I\n\x6\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x6\bW\n\b\r\b\xE\bX\x3\b"+
		"\x3\b\x3\t\x3\t\a\t_\n\t\f\t\xE\t\x62\v\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3"+
		"\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f\a\ft\n\f\f\f\xE\f"+
		"w\v\f\x5\fy\n\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x6\r"+
		"\x85\n\r\r\r\xE\r\x86\x3\r\x3\r\x3\r\x3\r\a\r\x8D\n\r\f\r\xE\r\x90\v\r"+
		"\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r"+
		"\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x5\r\xA8\n\r\x3\r\x3\r\x3\r\x3"+
		"\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\a\r\xBA"+
		"\n\r\f\r\xE\r\xBD\v\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3\x11\x3"+
		"\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\a"+
		"\x14\xD0\n\x14\f\x14\xE\x14\xD3\v\x14\x3\x14\x2\x2\x3\x18\x15\x2\x2\x4"+
		"\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A"+
		"\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2\x2\a\x3\x2\x15\x16\x3\x2\x17\x18\x3"+
		"\x2\x19\x1A\x3\x2\x1B \x3\x2\"#\xDC\x2+\x3\x2\x2\x2\x4\x34\x3\x2\x2\x2"+
		"\x6\x39\x3\x2\x2\x2\b=\x3\x2\x2\x2\nH\x3\x2\x2\x2\fJ\x3\x2\x2\x2\xEP\x3"+
		"\x2\x2\x2\x10\\\x3\x2\x2\x2\x12\x65\x3\x2\x2\x2\x14i\x3\x2\x2\x2\x16n"+
		"\x3\x2\x2\x2\x18\xA7\x3\x2\x2\x2\x1A\xBE\x3\x2\x2\x2\x1C\xC0\x3\x2\x2"+
		"\x2\x1E\xC2\x3\x2\x2\x2 \xC4\x3\x2\x2\x2\"\xC6\x3\x2\x2\x2$\xC8\x3\x2"+
		"\x2\x2&\xCA\x3\x2\x2\x2(*\x5\x4\x3\x2)(\x3\x2\x2\x2*-\x3\x2\x2\x2+)\x3"+
		"\x2\x2\x2+,\x3\x2\x2\x2,.\x3\x2\x2\x2-+\x3\x2\x2\x2./\a\x2\x2\x3/\x3\x3"+
		"\x2\x2\x2\x30\x35\x5\x6\x4\x2\x31\x35\x5\b\x5\x2\x32\x35\x5\f\a\x2\x33"+
		"\x35\x5\xE\b\x2\x34\x30\x3\x2\x2\x2\x34\x31\x3\x2\x2\x2\x34\x32\x3\x2"+
		"\x2\x2\x34\x33\x3\x2\x2\x2\x35\x5\x3\x2\x2\x2\x36:\x5\x14\v\x2\x37:\x5"+
		"\x12\n\x2\x38:\x5\x16\f\x2\x39\x36\x3\x2\x2\x2\x39\x37\x3\x2\x2\x2\x39"+
		"\x38\x3\x2\x2\x2:;\x3\x2\x2\x2;<\a\x3\x2\x2<\a\x3\x2\x2\x2=>\a\x4\x2\x2"+
		">?\a\x5\x2\x2?@\x5\x18\r\x2@\x41\a\x6\x2\x2\x41\x44\x5\x10\t\x2\x42\x43"+
		"\a\a\x2\x2\x43\x45\x5\n\x6\x2\x44\x42\x3\x2\x2\x2\x44\x45\x3\x2\x2\x2"+
		"\x45\t\x3\x2\x2\x2\x46I\x5\x10\t\x2GI\x5\b\x5\x2H\x46\x3\x2\x2\x2HG\x3"+
		"\x2\x2\x2I\v\x3\x2\x2\x2JK\a\b\x2\x2KL\a\x5\x2\x2LM\x5\x18\r\x2MN\a\x6"+
		"\x2\x2NO\x5\x10\t\x2O\r\x3\x2\x2\x2PQ\a\t\x2\x2QV\a\n\x2\x2RS\x5\x18\r"+
		"\x2ST\a\v\x2\x2TU\x5\x10\t\x2UW\x3\x2\x2\x2VR\x3\x2\x2\x2WX\x3\x2\x2\x2"+
		"XV\x3\x2\x2\x2XY\x3\x2\x2\x2YZ\x3\x2\x2\x2Z[\a\f\x2\x2[\xF\x3\x2\x2\x2"+
		"\\`\a\n\x2\x2]_\x5\x4\x3\x2^]\x3\x2\x2\x2_\x62\x3\x2\x2\x2`^\x3\x2\x2"+
		"\x2`\x61\x3\x2\x2\x2\x61\x63\x3\x2\x2\x2\x62`\x3\x2\x2\x2\x63\x64\a\f"+
		"\x2\x2\x64\x11\x3\x2\x2\x2\x65\x66\a%\x2\x2\x66g\a\r\x2\x2gh\x5\x18\r"+
		"\x2h\x13\x3\x2\x2\x2ij\a\xE\x2\x2jk\a%\x2\x2kl\a\r\x2\x2lm\x5\x18\r\x2"+
		"m\x15\x3\x2\x2\x2no\a%\x2\x2ox\a\x5\x2\x2pu\x5\x18\r\x2qr\a\xF\x2\x2r"+
		"t\x5\x18\r\x2sq\x3\x2\x2\x2tw\x3\x2\x2\x2us\x3\x2\x2\x2uv\x3\x2\x2\x2"+
		"vy\x3\x2\x2\x2wu\x3\x2\x2\x2xp\x3\x2\x2\x2xy\x3\x2\x2\x2yz\x3\x2\x2\x2"+
		"z{\a\x6\x2\x2{\x17\x3\x2\x2\x2|}\b\r\x1\x2}\xA8\x5$\x13\x2~\xA8\a%\x2"+
		"\x2\x7F\x84\a%\x2\x2\x80\x81\a\x10\x2\x2\x81\x82\x5\x18\r\x2\x82\x83\a"+
		"\x11\x2\x2\x83\x85\x3\x2\x2\x2\x84\x80\x3\x2\x2\x2\x85\x86\x3\x2\x2\x2"+
		"\x86\x84\x3\x2\x2\x2\x86\x87\x3\x2\x2\x2\x87\xA8\x3\x2\x2\x2\x88\x89\a"+
		"\n\x2\x2\x89\x8E\x5\x18\r\x2\x8A\x8B\a\xF\x2\x2\x8B\x8D\x5\x18\r\x2\x8C"+
		"\x8A\x3\x2\x2\x2\x8D\x90\x3\x2\x2\x2\x8E\x8C\x3\x2\x2\x2\x8E\x8F\x3\x2"+
		"\x2\x2\x8F\x91\x3\x2\x2\x2\x90\x8E\x3\x2\x2\x2\x91\x92\a\f\x2\x2\x92\xA8"+
		"\x3\x2\x2\x2\x93\x94\a\x12\x2\x2\x94\x95\x5\x18\r\x2\x95\x96\a\xF\x2\x2"+
		"\x96\x97\x5\x18\r\x2\x97\x98\a\x6\x2\x2\x98\xA8\x3\x2\x2\x2\x99\xA8\x5"+
		"\x16\f\x2\x9A\x9B\a%\x2\x2\x9B\x9C\a\x13\x2\x2\x9C\x9D\x5\x1A\xE\x2\x9D"+
		"\x9E\a\x5\x2\x2\x9E\x9F\x5\x18\r\x2\x9F\xA0\a\x6\x2\x2\xA0\xA8\x3\x2\x2"+
		"\x2\xA1\xA2\a\x5\x2\x2\xA2\xA3\x5\x18\r\x2\xA3\xA4\a\x6\x2\x2\xA4\xA8"+
		"\x3\x2\x2\x2\xA5\xA6\a\x14\x2\x2\xA6\xA8\x5\x18\r\a\xA7|\x3\x2\x2\x2\xA7"+
		"~\x3\x2\x2\x2\xA7\x7F\x3\x2\x2\x2\xA7\x88\x3\x2\x2\x2\xA7\x93\x3\x2\x2"+
		"\x2\xA7\x99\x3\x2\x2\x2\xA7\x9A\x3\x2\x2\x2\xA7\xA1\x3\x2\x2\x2\xA7\xA5"+
		"\x3\x2\x2\x2\xA8\xBB\x3\x2\x2\x2\xA9\xAA\f\x6\x2\x2\xAA\xAB\x5\x1C\xF"+
		"\x2\xAB\xAC\x5\x18\r\a\xAC\xBA\x3\x2\x2\x2\xAD\xAE\f\x5\x2\x2\xAE\xAF"+
		"\x5\x1E\x10\x2\xAF\xB0\x5\x18\r\x6\xB0\xBA\x3\x2\x2\x2\xB1\xB2\f\x4\x2"+
		"\x2\xB2\xB3\x5 \x11\x2\xB3\xB4\x5\x18\r\x5\xB4\xBA\x3\x2\x2\x2\xB5\xB6"+
		"\f\x3\x2\x2\xB6\xB7\x5\"\x12\x2\xB7\xB8\x5\x18\r\x4\xB8\xBA\x3\x2\x2\x2"+
		"\xB9\xA9\x3\x2\x2\x2\xB9\xAD\x3\x2\x2\x2\xB9\xB1\x3\x2\x2\x2\xB9\xB5\x3"+
		"\x2\x2\x2\xBA\xBD\x3\x2\x2\x2\xBB\xB9\x3\x2\x2\x2\xBB\xBC\x3\x2\x2\x2"+
		"\xBC\x19\x3\x2\x2\x2\xBD\xBB\x3\x2\x2\x2\xBE\xBF\t\x2\x2\x2\xBF\x1B\x3"+
		"\x2\x2\x2\xC0\xC1\t\x3\x2\x2\xC1\x1D\x3\x2\x2\x2\xC2\xC3\t\x4\x2\x2\xC3"+
		"\x1F\x3\x2\x2\x2\xC4\xC5\t\x5\x2\x2\xC5!\x3\x2\x2\x2\xC6\xC7\a!\x2\x2"+
		"\xC7#\x3\x2\x2\x2\xC8\xC9\t\x6\x2\x2\xC9%\x3\x2\x2\x2\xCA\xD1\a$\x2\x2"+
		"\xCB\xCC\a\x10\x2\x2\xCC\xCD\x5\x18\r\x2\xCD\xCE\a\x11\x2\x2\xCE\xD0\x3"+
		"\x2\x2\x2\xCF\xCB\x3\x2\x2\x2\xD0\xD3\x3\x2\x2\x2\xD1\xCF\x3\x2\x2\x2"+
		"\xD1\xD2\x3\x2\x2\x2\xD2\'\x3\x2\x2\x2\xD3\xD1\x3\x2\x2\x2\x11+\x34\x39"+
		"\x44HX`ux\x86\x8E\xA7\xB9\xBB\xD1";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Antlr_language.Content
